// Code generated by MockGen. DO NOT EDIT.
// Source: film.go

// Package mock_restapi is a generated GoMock package.
package mock_restapi

import (
	models "filmoteka/internal/app/models"
	models0 "filmoteka/internal/restapi/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockFilmService is a mock of FilmService interface.
type MockFilmService struct {
	ctrl     *gomock.Controller
	recorder *MockFilmServiceMockRecorder
}

// MockFilmServiceMockRecorder is the mock recorder for MockFilmService.
type MockFilmServiceMockRecorder struct {
	mock *MockFilmService
}

// NewMockFilmService creates a new mock instance.
func NewMockFilmService(ctrl *gomock.Controller) *MockFilmService {
	mock := &MockFilmService{ctrl: ctrl}
	mock.recorder = &MockFilmServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilmService) EXPECT() *MockFilmServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockFilmService) Create(f models0.CreateFilm) (models.Film, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", f)
	ret0, _ := ret[0].(models.Film)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockFilmServiceMockRecorder) Create(f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockFilmService)(nil).Create), f)
}

// Delete mocks base method.
func (m *MockFilmService) Delete(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockFilmServiceMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockFilmService)(nil).Delete), id)
}

// Find mocks base method.
func (m *MockFilmService) Find(id string) (models.Film, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", id)
	ret0, _ := ret[0].(models.Film)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockFilmServiceMockRecorder) Find(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockFilmService)(nil).Find), id)
}

// Search mocks base method.
func (m *MockFilmService) Search() ([]models.Film, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search")
	ret0, _ := ret[0].([]models.Film)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockFilmServiceMockRecorder) Search() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockFilmService)(nil).Search))
}

// Update mocks base method.
func (m *MockFilmService) Update(id string, f models0.UpdateFilm) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, f)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockFilmServiceMockRecorder) Update(id, f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockFilmService)(nil).Update), id, f)
}
